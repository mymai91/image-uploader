{
    "pipes": [],
    "interfaces": [
        {
            "name": "EmailErrors",
            "id": "interface-EmailErrors-b4f5eb3455d43421d58c9b1470019815099f6aab979b804f0e1a90d829b494afcfe7f1bafc2f74e5ec1df80c7b6b3f4da1c4b80cd2c033c1c72f0ceab9853acc",
            "file": "src/app/features/auth/login/login.type.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface EmailErrors {\n  required: string\n  email: string\n}\n\nexport interface PasswordErrors {\n  required: string\n  minlength: string\n}\n\nexport interface ErrorType {\n  [key: string]: string\n}\n\nexport interface ErrorMessages {\n  [key: string]: ErrorType\n}\n\nexport interface LoginRequest {\n  email: string\n  password: string\n}\n\nexport interface LoginResponse {\n  accessToken: string\n  user: {\n    id: string\n    email: string\n    name: string\n  }\n}\n\nexport interface RegisterRequest {\n  username: string\n  email: string\n  password: string\n}\n\nexport interface RegisterResponse {\n  id: string\n  email: string\n  username: string\n}\n",
            "properties": [
                {
                    "name": "email",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "required",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "ErrorMessages",
            "id": "interface-ErrorMessages-b4f5eb3455d43421d58c9b1470019815099f6aab979b804f0e1a90d829b494afcfe7f1bafc2f74e5ec1df80c7b6b3f4da1c4b80cd2c033c1c72f0ceab9853acc",
            "file": "src/app/features/auth/login/login.type.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface EmailErrors {\n  required: string\n  email: string\n}\n\nexport interface PasswordErrors {\n  required: string\n  minlength: string\n}\n\nexport interface ErrorType {\n  [key: string]: string\n}\n\nexport interface ErrorMessages {\n  [key: string]: ErrorType\n}\n\nexport interface LoginRequest {\n  email: string\n  password: string\n}\n\nexport interface LoginResponse {\n  accessToken: string\n  user: {\n    id: string\n    email: string\n    name: string\n  }\n}\n\nexport interface RegisterRequest {\n  username: string\n  email: string\n  password: string\n}\n\nexport interface RegisterResponse {\n  id: string\n  email: string\n  username: string\n}\n",
            "properties": [],
            "indexSignatures": [
                {
                    "id": "index-declaration-b4f5eb3455d43421d58c9b1470019815099f6aab979b804f0e1a90d829b494afcfe7f1bafc2f74e5ec1df80c7b6b3f4da1c4b80cd2c033c1c72f0ceab9853acc",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "ErrorType",
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "kind": 181,
            "methods": [],
            "extends": []
        },
        {
            "name": "ErrorType",
            "id": "interface-ErrorType-b4f5eb3455d43421d58c9b1470019815099f6aab979b804f0e1a90d829b494afcfe7f1bafc2f74e5ec1df80c7b6b3f4da1c4b80cd2c033c1c72f0ceab9853acc",
            "file": "src/app/features/auth/login/login.type.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface EmailErrors {\n  required: string\n  email: string\n}\n\nexport interface PasswordErrors {\n  required: string\n  minlength: string\n}\n\nexport interface ErrorType {\n  [key: string]: string\n}\n\nexport interface ErrorMessages {\n  [key: string]: ErrorType\n}\n\nexport interface LoginRequest {\n  email: string\n  password: string\n}\n\nexport interface LoginResponse {\n  accessToken: string\n  user: {\n    id: string\n    email: string\n    name: string\n  }\n}\n\nexport interface RegisterRequest {\n  username: string\n  email: string\n  password: string\n}\n\nexport interface RegisterResponse {\n  id: string\n  email: string\n  username: string\n}\n",
            "properties": [],
            "indexSignatures": [
                {
                    "id": "index-declaration-b4f5eb3455d43421d58c9b1470019815099f6aab979b804f0e1a90d829b494afcfe7f1bafc2f74e5ec1df80c7b6b3f4da1c4b80cd2c033c1c72f0ceab9853acc",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "string",
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "kind": 181,
            "methods": [],
            "extends": []
        },
        {
            "name": "ImageResponse",
            "id": "interface-ImageResponse-8986616435336d7875e841d6664b91efbebef99f4005f2db8a4aa9d802c80796c14910d97d89cb4620345fbed38678d2ba325b0c91679a61d401788b2868f92d",
            "file": "src/app/features/images/images.type.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface ImageResponse {\n  id: number\n  filename: string\n  path: string\n  description?: string\n  createdAt: Date\n  updatedAt: Date\n}\n\nexport interface ListImagesResponse {\n  items: ImageResponse[]\n  total: number\n  page: number\n  limit: number\n  totalPages: number\n}\n",
            "properties": [
                {
                    "name": "createdAt",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "filename",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "path",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "updatedAt",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "ListImagesResponse",
            "id": "interface-ListImagesResponse-8986616435336d7875e841d6664b91efbebef99f4005f2db8a4aa9d802c80796c14910d97d89cb4620345fbed38678d2ba325b0c91679a61d401788b2868f92d",
            "file": "src/app/features/images/images.type.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface ImageResponse {\n  id: number\n  filename: string\n  path: string\n  description?: string\n  createdAt: Date\n  updatedAt: Date\n}\n\nexport interface ListImagesResponse {\n  items: ImageResponse[]\n  total: number\n  page: number\n  limit: number\n  totalPages: number\n}\n",
            "properties": [
                {
                    "name": "items",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ImageResponse[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "limit",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "page",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "total",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "totalPages",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "LoginRequest",
            "id": "interface-LoginRequest-b4f5eb3455d43421d58c9b1470019815099f6aab979b804f0e1a90d829b494afcfe7f1bafc2f74e5ec1df80c7b6b3f4da1c4b80cd2c033c1c72f0ceab9853acc",
            "file": "src/app/features/auth/login/login.type.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface EmailErrors {\n  required: string\n  email: string\n}\n\nexport interface PasswordErrors {\n  required: string\n  minlength: string\n}\n\nexport interface ErrorType {\n  [key: string]: string\n}\n\nexport interface ErrorMessages {\n  [key: string]: ErrorType\n}\n\nexport interface LoginRequest {\n  email: string\n  password: string\n}\n\nexport interface LoginResponse {\n  accessToken: string\n  user: {\n    id: string\n    email: string\n    name: string\n  }\n}\n\nexport interface RegisterRequest {\n  username: string\n  email: string\n  password: string\n}\n\nexport interface RegisterResponse {\n  id: string\n  email: string\n  username: string\n}\n",
            "properties": [
                {
                    "name": "email",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "password",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "LoginResponse",
            "id": "interface-LoginResponse-b4f5eb3455d43421d58c9b1470019815099f6aab979b804f0e1a90d829b494afcfe7f1bafc2f74e5ec1df80c7b6b3f4da1c4b80cd2c033c1c72f0ceab9853acc",
            "file": "src/app/features/auth/login/login.type.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface EmailErrors {\n  required: string\n  email: string\n}\n\nexport interface PasswordErrors {\n  required: string\n  minlength: string\n}\n\nexport interface ErrorType {\n  [key: string]: string\n}\n\nexport interface ErrorMessages {\n  [key: string]: ErrorType\n}\n\nexport interface LoginRequest {\n  email: string\n  password: string\n}\n\nexport interface LoginResponse {\n  accessToken: string\n  user: {\n    id: string\n    email: string\n    name: string\n  }\n}\n\nexport interface RegisterRequest {\n  username: string\n  email: string\n  password: string\n}\n\nexport interface RegisterResponse {\n  id: string\n  email: string\n  username: string\n}\n",
            "properties": [
                {
                    "name": "accessToken",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "user",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 28
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "PasswordErrors",
            "id": "interface-PasswordErrors-b4f5eb3455d43421d58c9b1470019815099f6aab979b804f0e1a90d829b494afcfe7f1bafc2f74e5ec1df80c7b6b3f4da1c4b80cd2c033c1c72f0ceab9853acc",
            "file": "src/app/features/auth/login/login.type.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface EmailErrors {\n  required: string\n  email: string\n}\n\nexport interface PasswordErrors {\n  required: string\n  minlength: string\n}\n\nexport interface ErrorType {\n  [key: string]: string\n}\n\nexport interface ErrorMessages {\n  [key: string]: ErrorType\n}\n\nexport interface LoginRequest {\n  email: string\n  password: string\n}\n\nexport interface LoginResponse {\n  accessToken: string\n  user: {\n    id: string\n    email: string\n    name: string\n  }\n}\n\nexport interface RegisterRequest {\n  username: string\n  email: string\n  password: string\n}\n\nexport interface RegisterResponse {\n  id: string\n  email: string\n  username: string\n}\n",
            "properties": [
                {
                    "name": "minlength",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "required",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "RegisterRequest",
            "id": "interface-RegisterRequest-b4f5eb3455d43421d58c9b1470019815099f6aab979b804f0e1a90d829b494afcfe7f1bafc2f74e5ec1df80c7b6b3f4da1c4b80cd2c033c1c72f0ceab9853acc",
            "file": "src/app/features/auth/login/login.type.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface EmailErrors {\n  required: string\n  email: string\n}\n\nexport interface PasswordErrors {\n  required: string\n  minlength: string\n}\n\nexport interface ErrorType {\n  [key: string]: string\n}\n\nexport interface ErrorMessages {\n  [key: string]: ErrorType\n}\n\nexport interface LoginRequest {\n  email: string\n  password: string\n}\n\nexport interface LoginResponse {\n  accessToken: string\n  user: {\n    id: string\n    email: string\n    name: string\n  }\n}\n\nexport interface RegisterRequest {\n  username: string\n  email: string\n  password: string\n}\n\nexport interface RegisterResponse {\n  id: string\n  email: string\n  username: string\n}\n",
            "properties": [
                {
                    "name": "email",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "password",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "username",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 36
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "RegisterResponse",
            "id": "interface-RegisterResponse-b4f5eb3455d43421d58c9b1470019815099f6aab979b804f0e1a90d829b494afcfe7f1bafc2f74e5ec1df80c7b6b3f4da1c4b80cd2c033c1c72f0ceab9853acc",
            "file": "src/app/features/auth/login/login.type.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface EmailErrors {\n  required: string\n  email: string\n}\n\nexport interface PasswordErrors {\n  required: string\n  minlength: string\n}\n\nexport interface ErrorType {\n  [key: string]: string\n}\n\nexport interface ErrorMessages {\n  [key: string]: ErrorType\n}\n\nexport interface LoginRequest {\n  email: string\n  password: string\n}\n\nexport interface LoginResponse {\n  accessToken: string\n  user: {\n    id: string\n    email: string\n    name: string\n  }\n}\n\nexport interface RegisterRequest {\n  username: string\n  email: string\n  password: string\n}\n\nexport interface RegisterResponse {\n  id: string\n  email: string\n  username: string\n}\n",
            "properties": [
                {
                    "name": "email",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "username",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 44
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "RouteData",
            "id": "interface-RouteData-5585c152766b70d7cb3f952b815f4dc869f64ea2196c7accc016e1aa20314c2ff1442af8e3c82a4be6c05c09692cee75a3d20b6c335ca3b0b899d962e09fd1d8",
            "file": "src/app/core/guards/auth.guard.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core'\nimport { ActivatedRouteSnapshot, CanActivate, Router } from '@angular/router'\nimport { AuthService } from '@app/features/auth/service'\n\nexport interface RouteData {\n  requiresAuth?: boolean\n  roles?: string[]\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthGuard implements CanActivate {\n  constructor(private authService: AuthService, private router: Router) {}\n\n  canActivate(route: ActivatedRouteSnapshot): boolean {\n    const data = route.data as RouteData // Explicitly cast data\n\n    const requiresAuth = data.requiresAuth || false\n\n    if (requiresAuth && !this.authService.isAuthenticated()) {\n      this.router.navigate(['/login'])\n      return false\n    }\n\n    // const requiredRoles = route.data?.roles || []\n    // if (requiredRoles.length && !this.authService.hasRole(requiredRoles)) {\n    //   this.router.navigate(['/access-denied'])\n    //   return false\n    // }\n\n    return true\n  }\n}\n\n// export const routes: Routes = [\n//   {\n//     path: 'dashboard',\n//     component: DashboardComponent,\n//     data: { requiresAuth: true }, // Requires authentication\n//   },\n//   {\n//     path: 'admin',\n//     component: AdminComponent,\n//     data: { requiresAuth: true, roles: ['admin'] }, // Requires authentication and admin role\n//   },\n// ]\n",
            "properties": [
                {
                    "name": "requiresAuth",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "roles",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "User",
            "id": "interface-User-d4821beac0e4a852e513391b7470981c4353fdd95a18628bb68136c8695b489ee15b926e2e5031bc26cf30e1508e0a362c3ee13a06734702b4d15af140e485d5",
            "file": "src/stories/user.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface User {\n  name: string;\n}\n",
            "properties": [
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        }
    ],
    "injectables": [
        {
            "name": "AuthService",
            "id": "injectable-AuthService-50908fc80d0ac082e80c9c4c05992f79c893b95c1bf1ba2abe460face92473ec76ea8fcbfa8684cbe363bb39e7caf4f8a803f35f7d08643bb0f4687a20d7e2c8",
            "file": "src/app/features/auth/service/auth.service.ts",
            "properties": [
                {
                    "name": "API_URL",
                    "defaultValue": "`${environment.apiUrl}`",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        123,
                        148
                    ]
                }
            ],
            "methods": [
                {
                    "name": "isAuthenticated",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "register",
                    "args": [
                        {
                            "name": "data",
                            "type": "RegisterRequest",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<RegisterResponse>",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "RegisterRequest",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "signin",
                    "args": [
                        {
                            "name": "data",
                            "type": "LoginRequest",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<LoginResponse>",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "LoginRequest",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "signout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpClient } from '@angular/common/http'\nimport { Injectable } from '@angular/core'\nimport {\n  LoginRequest,\n  LoginResponse,\n  RegisterRequest,\n  RegisterResponse,\n} from '../login/login.type'\nimport { Observable, tap } from 'rxjs'\nimport { environment } from '@env/environment'\n\n@Injectable({\n  providedIn: 'root',\n})\n/*\nWhen you've added withInterceptors([authInterceptor]) to your app.config.ts, you still need to include withCredentials: true in your HTTP requests if you're:\nWorking with cookies\nMaking cross-origin requests (when your frontend and backend are on different domains/ports)\n*/\nexport class AuthService {\n  // TODO - implement enviroment.apiUrl\n  private readonly API_URL = `${environment.apiUrl}`\n\n  constructor(private http: HttpClient) {}\n\n  signin(data: LoginRequest): Observable<LoginResponse> {\n    return this.http\n      .post<LoginResponse>(`${this.API_URL}/auth/signin`, data)\n      .pipe(\n        tap((response: LoginResponse) => {\n          // Save the token in localStorage\n\n          console.log('response', response)\n          if (response.accessToken) {\n            localStorage.setItem('accessToken', response.accessToken)\n          }\n        }),\n      )\n  }\n\n  register(data: RegisterRequest): Observable<RegisterResponse> {\n    console.log('data', data)\n    return this.http\n      .post<RegisterResponse>(`${this.API_URL}/users`, data)\n      .pipe()\n    // tap((response: RegisterResponse) => {\n    //   console.log('response', response)\n    // }),\n  }\n\n  // TODO: Implement signout api\n  signout(): void {\n    // Clear the token on logout\n    localStorage.removeItem('accessToken')\n  }\n\n  // TODO: Implement isAuthenticated api\n  isAuthenticated(): boolean {\n    return Boolean(localStorage.getItem('accessToken'))\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 22,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "ImagesService",
            "id": "injectable-ImagesService-4dc290e61b510ad8ad1e015ed791451e66c2e33a93b7ef64309353c5a74be13671e3ccf1d3661d58c1b6479fbb04057ea07de08fed466640d92fb9507eafcd0a",
            "file": "src/app/features/images/service/images.service.ts",
            "properties": [
                {
                    "name": "activeImages$",
                    "defaultValue": "this.activeImagesSubject.asObservable()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "activeImagesSubject",
                    "defaultValue": "new BehaviorSubject<ListImagesResponse>({\n    items: [],\n    total: 0,\n    page: 1,\n    limit: 10,\n    totalPages: 1,\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "API_URL",
                    "defaultValue": "'http://localhost:3000/images'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "inactiveImages$",
                    "defaultValue": "this.inactiveImagesSubject.asObservable()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "inactiveImagesSubject",
                    "defaultValue": "new BehaviorSubject<ListImagesResponse>({\n    items: [],\n    total: 0,\n    page: 1,\n    limit: 10,\n    totalPages: 1,\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "deleteImage",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<void>",
                    "typeParameters": [],
                    "line": 76,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getListImages",
                    "args": [
                        {
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<ListImagesResponse>",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "restoreImage",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<void>",
                    "typeParameters": [],
                    "line": 102,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "uploadImage",
                    "args": [
                        {
                            "name": "file",
                            "type": "File",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "description",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<ImageResponse>",
                    "typeParameters": [],
                    "line": 62,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "file",
                            "type": "File",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "description",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpClient } from '@angular/common/http'\nimport { Injectable } from '@angular/core'\nimport { ImageResponse, ListImagesResponse } from '../images.type'\nimport { BehaviorSubject, map, Observable, tap } from 'rxjs'\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ImagesService {\n  private readonly API_URL = 'http://localhost:3000/images'\n\n  constructor(private http: HttpClient) {}\n\n  // State for active and inactive images\n  private activeImagesSubject = new BehaviorSubject<ListImagesResponse>({\n    items: [],\n    total: 0,\n    page: 1,\n    limit: 10,\n    totalPages: 1,\n  })\n\n  private inactiveImagesSubject = new BehaviorSubject<ListImagesResponse>({\n    items: [],\n    total: 0,\n    page: 1,\n    limit: 10,\n    totalPages: 1,\n  })\n\n  activeImages$ = this.activeImagesSubject.asObservable()\n  inactiveImages$ = this.inactiveImagesSubject.asObservable()\n\n  // Fetch images and update the correct BehaviorSubject\n  getListImages({\n    isActive,\n    page = 1,\n    limit = 10,\n  }: {\n    isActive: boolean\n    page?: number\n    limit?: number\n  }): Observable<ListImagesResponse> {\n    const params: Record<string, string> = {\n      isActive: isActive.toString(),\n      page: page.toString(),\n      limit: limit.toString(),\n    }\n\n    return this.http.get<ListImagesResponse>(this.API_URL, { params }).pipe(\n      tap(response => {\n        console.log('response', response)\n        if (isActive) {\n          this.activeImagesSubject.next(response)\n        } else {\n          this.inactiveImagesSubject.next(response)\n        }\n      }),\n    )\n  }\n\n  uploadImage(file: File, description: string): Observable<ImageResponse> {\n    const formData = new FormData()\n    formData.append('image', file)\n    formData.append('description', description)\n\n    return this.http.post<ImageResponse>(this.API_URL, formData).pipe(\n      map((response: ImageResponse) => {\n        console.log('response', response)\n        return response\n      }),\n    )\n  }\n\n  // Delete an image and update both lists\n  deleteImage(id: number): Observable<void> {\n    return this.http.delete<void>(`${this.API_URL}/${id}`).pipe(\n      tap(() => {\n        const activeImages = this.activeImagesSubject.value\n        const updatedActiveItems = activeImages.items.filter(\n          img => img.id !== id,\n        )\n\n        const deletedImage = activeImages.items.find(img => img.id === id)\n        const inactiveImages = this.inactiveImagesSubject.value\n\n        this.activeImagesSubject.next({\n          ...activeImages,\n          items: updatedActiveItems,\n        })\n\n        if (deletedImage) {\n          this.inactiveImagesSubject.next({\n            ...inactiveImages,\n            items: [deletedImage, ...inactiveImages.items],\n          })\n        }\n      }),\n    )\n  }\n\n  restoreImage(id: number): Observable<void> {\n    return this.http.put<void>(`${this.API_URL}/${id}/restore`, {}).pipe(\n      tap(() => {\n        const inactiveImages = this.inactiveImagesSubject.value\n        const restoredImage = inactiveImages.items.find(img => img.id === id)\n        const updatedInactiveItems = inactiveImages.items.filter(\n          img => img.id !== id,\n        )\n\n        this.inactiveImagesSubject.next({\n          ...inactiveImages,\n          items: updatedInactiveItems,\n        })\n\n        if (restoredImage) {\n          const activeImages = this.activeImagesSubject.value\n          this.activeImagesSubject.next({\n            ...activeImages,\n            items: [restoredImage, ...activeImages.items],\n          })\n        }\n      }),\n    )\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "StorageService",
            "id": "injectable-StorageService-93cfb7fb3de93d64be4c9248dd026824be25a4d316e62bed9d2e295db36fbf71aab4702959a2bbc86d43f713e1b178dca58120ea7e295bfdb46c759b389b6604",
            "file": "src/app/core/storage/storage.service.ts",
            "properties": [
                {
                    "name": "isBrowser",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getItem",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string | null",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeItem",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setItem",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core'\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class StorageService {\n  private isBrowser: boolean\n\n  constructor() {\n    this.isBrowser = typeof window !== 'undefined'\n  }\n\n  getItem(key: string): string | null {\n    return this.isBrowser ? localStorage.getItem(key) : null\n  }\n\n  setItem(key: string, value: string): void {\n    if (this.isBrowser) {\n      localStorage.setItem(key, value)\n    }\n  }\n\n  removeItem(key: string): void {\n    if (this.isBrowser) {\n      localStorage.removeItem(key)\n    }\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 7
            },
            "extends": [],
            "type": "injectable"
        }
    ],
    "guards": [
        {
            "name": "AuthenticatedGuard",
            "id": "injectable-AuthenticatedGuard-98cdd6291afbfd0dd984791992265d5b9fbb35cf7762fc2ad81afae80935420137f198defec1c88fb9b021dc308348352af25386d78a2209042da53474031653",
            "file": "src/app/core/guards/authenticated.guard.ts",
            "properties": [],
            "methods": [
                {
                    "name": "canActivate",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core'\nimport { CanActivate, Router } from '@angular/router'\nimport { AuthService } from '@app/features/auth/service'\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthenticatedGuard implements CanActivate {\n  constructor(private authService: AuthService, private router: Router) {}\n\n  canActivate(): boolean {\n    if (this.authService.isAuthenticated()) {\n      this.router.navigate(['images'])\n      return false\n    }\n\n    return true\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 8,
                "jsdoctags": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "guard"
        },
        {
            "name": "AuthGuard",
            "id": "injectable-AuthGuard-5585c152766b70d7cb3f952b815f4dc869f64ea2196c7accc016e1aa20314c2ff1442af8e3c82a4be6c05c09692cee75a3d20b6c335ca3b0b899d962e09fd1d8",
            "file": "src/app/core/guards/auth.guard.ts",
            "properties": [],
            "methods": [
                {
                    "name": "canActivate",
                    "args": [
                        {
                            "name": "route",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "route",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core'\nimport { ActivatedRouteSnapshot, CanActivate, Router } from '@angular/router'\nimport { AuthService } from '@app/features/auth/service'\n\nexport interface RouteData {\n  requiresAuth?: boolean\n  roles?: string[]\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthGuard implements CanActivate {\n  constructor(private authService: AuthService, private router: Router) {}\n\n  canActivate(route: ActivatedRouteSnapshot): boolean {\n    const data = route.data as RouteData // Explicitly cast data\n\n    const requiresAuth = data.requiresAuth || false\n\n    if (requiresAuth && !this.authService.isAuthenticated()) {\n      this.router.navigate(['/login'])\n      return false\n    }\n\n    // const requiredRoles = route.data?.roles || []\n    // if (requiredRoles.length && !this.authService.hasRole(requiredRoles)) {\n    //   this.router.navigate(['/access-denied'])\n    //   return false\n    // }\n\n    return true\n  }\n}\n\n// export const routes: Routes = [\n//   {\n//     path: 'dashboard',\n//     component: DashboardComponent,\n//     data: { requiresAuth: true }, // Requires authentication\n//   },\n//   {\n//     path: 'admin',\n//     component: AdminComponent,\n//     data: { requiresAuth: true, roles: ['admin'] }, // Requires authentication and admin role\n//   },\n// ]\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "guard"
        }
    ],
    "interceptors": [],
    "classes": [
        {
            "name": "ErrorMessageService",
            "id": "class-ErrorMessageService-d221db810b93f0c7430ee039857edc1957710bd4d02c5fd6b2310cd5ce0af2139f943024f60786c3680afb0fd98462b7d2999fb9c3d63ed95a8f68fd336b492f",
            "file": "src/app/shared/services/error-message.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { AbstractControl } from '@angular/forms'\n\nexport class ErrorMessageService {\n  private errorMessages = {\n    required: (field: string) => `${field} is required`,\n    email: () => 'Invalide email',\n    minlength: (field: string, config: any) => {\n      return `${field} must be at least ${config.requiredLength} characters`\n    },\n    pattern: (field: string) => `Invalid ${field} format`,\n    serverError: (error: string) => error,\n  }\n\n  getErrorMessage(control: AbstractControl, fieldName: string): string {\n    if (!control || !control.errors) {\n      return ''\n    }\n\n    const firstError = Object.keys(control.errors)[0]\n\n    const getError = this.errorMessages[firstError]\n\n    return getError(fieldName, control.errors[firstError])\n  }\n}\n",
            "inputsClass": [],
            "outputsClass": [],
            "properties": [
                {
                    "name": "errorMessages",
                    "defaultValue": "{\n    required: (field: string) => `${field} is required`,\n    email: () => 'Invalide email',\n    minlength: (field: string, config: any) => {\n      return `${field} must be at least ${config.requiredLength} characters`\n    },\n    pattern: (field: string) => `Invalid ${field} format`,\n    serverError: (error: string) => error,\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 4,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getErrorMessage",
                    "args": [
                        {
                            "name": "control",
                            "type": "AbstractControl",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "fieldName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "control",
                            "type": "AbstractControl",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "fieldName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "extends": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [],
    "components": [
        {
            "name": "AppComponent",
            "id": "component-AppComponent-cfaf4e7bc874d1d9a294929d0d2f11adb28310bdb7ef71df0b07ee90cdca10e2f3840b10d6f0c3def3e2145c0f1e426b1fdd5c294fac14659be0aebb985616f2",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "title",
                    "defaultValue": "'image-uploader-angular-app'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "methodsClass": [
                {
                    "name": "showHeader",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "RouterOutlet"
                },
                {
                    "name": "HeaderComponent",
                    "type": "component"
                },
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core'\nimport { Router, RouterOutlet } from '@angular/router'\nimport { HeaderComponent } from './shared/components/header/header.component'\nimport { CommonModule } from '@angular/common'\n\n@Component({\n  selector: 'app-root',\n  imports: [RouterOutlet, HeaderComponent, CommonModule],\n  templateUrl: './app.component.html',\n  styleUrl: './app.component.scss',\n})\nexport class AppComponent {\n  constructor(private router: Router) {}\n  title = 'image-uploader-angular-app'\n\n  // showHeader(): boolean {\n  //   return (\n  //     this.router.url !== '/login' &&\n  //     this.router.url !== '/register' &&\n  //     this.router.url !== '/'\n  //   )\n  // }\n\n  showHeader(): boolean {\n    const urlWithoutQuery = this.router.url.split('?')[0]\n    return (\n      urlWithoutQuery !== '/login' &&\n      this.router.url !== '/register' &&\n      this.router.url !== '/'\n    )\n  }\n}\n",
            "styleUrl": "./app.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<div>\n  <app-header *ngIf=\"showHeader()\"></app-header>\n  <router-outlet></router-outlet>\n</div>"
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-d7bf0323e6da130e2609e2af0117b4a8d7cd874132206af50bf43dfc37044485fe50f2867ea76525730dd195b9b95a43802a12dadc6ad5cd7bf2faa07f19f0da",
            "file": "src/stories/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-button",
            "styleUrls": [
                "./button.css"
            ],
            "styles": [],
            "template": " <button  type=\"button\"\n  (click)=\"onClick.emit($event)\"\n  [ngClass]=\"classes\"\n  [ngStyle]=\"{ 'background-color': backgroundColor }\"\n>\n  {{ label }}\n</button>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nWhat background color to use",
                    "description": "<p>What background color to use</p>\n",
                    "line": 25,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "'Button'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 760,
                            "end": 773,
                            "kind": 327,
                            "id": 0,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "tagName": {
                                "pos": 761,
                                "end": 769,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "required"
                            },
                            "comment": ""
                        }
                    ],
                    "rawdescription": "\n\nButton contents\n\n",
                    "description": "<p>Button contents</p>\n",
                    "line": 37,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "primary",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nIs this the principal call to action on the page?",
                    "description": "<p>Is this the principal call to action on the page?</p>\n",
                    "line": 21,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nHow large should the button be?",
                    "description": "<p>How large should the button be?</p>\n",
                    "line": 29,
                    "type": "\"small\" | \"medium\" | \"large\"",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nOptional click handler",
                    "description": "<p>Optional click handler</p>\n",
                    "line": 41,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-button',\n  standalone: true,\n  imports: [CommonModule],\n  template: ` <button\n  type=\"button\"\n  (click)=\"onClick.emit($event)\"\n  [ngClass]=\"classes\"\n  [ngStyle]=\"{ 'background-color': backgroundColor }\"\n>\n  {{ label }}\n</button>`,\n  styleUrls: ['./button.css'],\n})\nexport class ButtonComponent {\n  /** Is this the principal call to action on the page? */\n  @Input()\n  primary = false;\n\n  /** What background color to use */\n  @Input()\n  backgroundColor?: string;\n\n  /** How large should the button be? */\n  @Input()\n  size: 'small' | 'medium' | 'large' = 'medium';\n\n  /**\n   * Button contents\n   *\n   * @required\n   */\n  @Input()\n  label = 'Button';\n\n  /** Optional click handler */\n  @Output()\n  onClick = new EventEmitter<Event>();\n\n  public get classes(): string[] {\n    const mode = this.primary ? 'storybook-button--primary' : 'storybook-button--secondary';\n\n    return ['storybook-button', `storybook-button--${this.size}`, mode];\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-button {\n  display: inline-block;\n  cursor: pointer;\n  border: 0;\n  border-radius: 3em;\n  font-weight: 700;\n  line-height: 1;\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n}\n.storybook-button--primary {\n  background-color: #555ab9;\n  color: white;\n}\n.storybook-button--secondary {\n  box-shadow: rgba(0, 0, 0, 0.15) 0px 0px 0px 1px inset;\n  background-color: transparent;\n  color: #333;\n}\n.storybook-button--small {\n  padding: 10px 16px;\n  font-size: 12px;\n}\n.storybook-button--medium {\n  padding: 11px 20px;\n  font-size: 14px;\n}\n.storybook-button--large {\n  padding: 12px 24px;\n  font-size: 16px;\n}\n",
                    "styleUrl": "./button.css"
                }
            ],
            "stylesData": "",
            "extends": [],
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 43
                    }
                }
            }
        },
        {
            "name": "CreateNewImageComponent",
            "id": "component-CreateNewImageComponent-c9e71be79b330d01cf6829ac4e7b33428ea9de876b03bab1febb3e60c9ee0518f3868586fd0a9eee9ae48f6b0edb5dcaf921d41d495f77e5dd09d820d88adb5b",
            "file": "src/app/features/images/new/new.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-image-new",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./new.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "accept",
                    "defaultValue": "'image/jpeg,image/jpg,image/png'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "activeImages",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ImageResponse[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "activeTab",
                    "defaultValue": "'active'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "error",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "files",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "File[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "inactiveImages",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ImageResponse[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "isActive",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "isLoading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "isUploading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "maxFileSize",
                    "defaultValue": "5 * 1024 * 1024",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                }
            ],
            "methodsClass": [
                {
                    "name": "deleteImage",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "loadImages",
                    "args": [
                        {
                            "name": "isActive",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "isActive",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onRemove",
                    "args": [
                        {
                            "name": "file",
                            "type": "File",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 107,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "file",
                            "type": "File",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onSelect",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 93,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "restoreImage",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 83,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "switchTab",
                    "args": [
                        {
                            "name": "tab",
                            "type": "\"active\" | \"inactive\"",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 78,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "tab",
                            "type": "\"active\" | \"inactive\"",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "uploadImage",
                    "args": [
                        {
                            "name": "file",
                            "type": "File",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "description",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 112,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "file",
                            "type": "File",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "description",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "NgxDropzoneModule",
                    "type": "module"
                },
                {
                    "name": "ImageListComponent",
                    "type": "component"
                },
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core'\nimport { NgxDropzoneModule } from 'ngx-dropzone'\nimport { ImagesService } from '../service/images.service'\nimport { Router } from '@angular/router'\nimport { ImageListComponent } from '../components/image-list/image-list.component'\nimport { ImageResponse } from '../images.type'\nimport { response } from 'express'\nimport { CommonModule } from '@angular/common'\n\n@Component({\n  selector: 'app-image-new',\n  standalone: true,\n  imports: [NgxDropzoneModule, ImageListComponent, CommonModule],\n  templateUrl: './new.component.html',\n  styleUrl: './new.component.scss',\n})\nexport class CreateNewImageComponent {\n  accept = 'image/jpeg,image/jpg,image/png'\n  files: File[] = []\n  maxFileSize = 5 * 1024 * 1024 // max 5MB\n  isUploading = false\n  activeImages: ImageResponse[] = []\n  inactiveImages: ImageResponse[] = []\n  isLoading = false\n  error = ''\n  activeTab = 'active'\n  isActive: boolean = true\n\n  constructor(private imagesService: ImagesService, private router: Router) {}\n\n  ngOnInit() {\n    // Subscribe to reactive streams\n\n    this.imagesService.activeImages$.subscribe(response => {\n      this.activeImages = response.items\n    })\n\n    this.imagesService.inactiveImages$.subscribe(response => {\n      this.inactiveImages = response.items\n    })\n\n    // Load initial data\n    this.loadImages(true)\n    this.loadImages(false)\n  }\n\n  loadImages(isActive: boolean) {\n    this.isLoading = true\n\n    this.imagesService\n      .getListImages({\n        isActive,\n      })\n      .subscribe({\n        next: () => {\n          this.isLoading = false // Reactive streams handle data updates\n        },\n        error: err => {\n          console.error('Failed to load images:', err)\n          this.error = 'Failed to load images.'\n          this.isLoading = false\n        },\n      })\n  }\n\n  deleteImage(id: number) {\n    if (!confirm('Are you sure you want to delete this image?')) return\n\n    this.imagesService.deleteImage(id).subscribe({\n      next: () => console.log(`Image with ID ${id} deleted.`),\n      error: err => {\n        console.error('Failed to delete image:', err)\n        this.error = 'Failed to delete image.'\n      },\n    })\n  }\n\n  switchTab(tab: 'active' | 'inactive') {\n    this.activeTab = tab\n    this.isActive = tab === 'active'\n  }\n\n  restoreImage(id: number) {\n    this.imagesService.restoreImage(id).subscribe({\n      next: () => console.log(`Image ${id} restored`),\n      error: err => {\n        console.error('Failed to restore image:', err)\n        this.error = 'Failed to restore image.'\n      },\n    })\n  }\n\n  onSelect(event: any): void {\n    console.log('Files added:', event.addedFiles)\n\n    const imageUploads = event.addedFiles\n\n    if (imageUploads.length > 0) {\n      const imageFile = imageUploads[0]\n      const description = '#TODO will get file name'\n      this.uploadImage(imageFile, description)\n    }\n\n    // this.files.push(...event.addedFiles)\n  }\n\n  onRemove(file: File): void {\n    console.log('File removed:', file)\n    // this.files = this.files.filter(f => f !== file)\n  }\n\n  uploadImage(file: File, description: string) {\n    this.isUploading = true\n\n    this.imagesService.uploadImage(file, description).subscribe({\n      next: response => {\n        // console.log('upload successful', response)\n        this.router.navigate(['/images'])\n      },\n      error: error => {},\n      complete: () => {\n        this.isUploading = false\n      },\n    })\n  }\n}\n",
            "styleUrl": "./new.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "imagesService",
                        "type": "ImagesService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 27,
                "jsdoctags": [
                    {
                        "name": "imagesService",
                        "type": "ImagesService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<div class=\"container mx-auto p-4\">\n  <h1 class=\"text-2xl font-bold mb-4\">Upload New Image</h1>\n\n  <!-- Dropzone -->\n  <ngx-dropzone (change)=\"onSelect($event)\" [multiple]=\"false\" [accept]=\"accept\" [maxFileSize]=\"maxFileSize\"\n    class=\"border border-dashed border-gray-300 p-6 rounded-lg\">\n    <ngx-dropzone-label>\n      <p class=\"text-center text-gray-500\">\n        Drag and drop your images here, or click to browse\n      </p>\n    </ngx-dropzone-label>\n  </ngx-dropzone>\n\n  <div class=\"mb-4 text-gray-600 h-12 mt-8\">\n    <p *ngIf=\"activeTab === 'inactive' && inactiveImages.length > 0\">\n      <strong>Note:</strong> Image will be deleted in <span class=\"text-red-500 font-semibold\">1 hour</span>. If\n      you change your mind, restore your image.\n    </p>\n  </div>\n\n\n  <div class=\"mt-12\">\n    <div class=\"tabs flex border-b border-gray-200 mb-12\">\n      <button class=\"tab px-4 py-2\" [class.active]=\"activeTab === 'active'\" (click)=\"switchTab('active')\">\n        Active Images\n      </button>\n      <button class=\"tab px-4 py-2\" [class.active]=\"activeTab === 'inactive'\" (click)=\"switchTab('inactive')\">\n        Deleted Images\n      </button>\n    </div>\n\n    <ng-container *ngIf=\"!isLoading\">\n      <div [ngSwitch]=\"activeTab\">\n        <div *ngSwitchCase=\"'active'\">\n          <global-image-list [title]=\"'Active Image'\" [images]=\"activeImages\"\n            [noImagesMessage]=\"'No active images found'\" [isActive]=\"isActive\"\n            (onDelete)=\"deleteImage($event)\"></global-image-list>\n        </div>\n\n        <div *ngSwitchCase=\"'inactive'\">\n          <global-image-list [title]=\"'Inactive Image'\" [images]=\"inactiveImages\"\n            [noImagesMessage]=\"'No inactive images found'\" [isActive]=\"isActive\"\n            (onRestore)=\"restoreImage($event)\"></global-image-list>\n        </div>\n      </div>\n    </ng-container>\n\n    <!-- <ng-container *ngIf=\"!isLoading\">\n      <div *ngIf=\"activeTab === 'active'\">\n        <global-image-list title=\"Active\" [images]=\"activeImages\" [isActive]=\"isActive\"\n          (onDelete)=\"deleteImage($event)\"></global-image-list>\n      </div>\n\n      <div *ngIf=\"activeTab === 'inactive'\">\n        <global-image-list title=\"InActive\" [images]=\"inactiveImages\" [isActive]=\"isActive\"\n          (onRestore)=\"restoreImage($event)\"></global-image-list>\n      </div>\n    </ng-container> -->\n  </div>\n</div>"
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-48b9abe37706bc42f20cfa97ed9f943678344ea7d254c0c82183c657750c2191b43486fe730c778627b2ea6aa0e2f33a7abcf3ce08b68ad18b062ad99ea97acb",
            "file": "src/stories/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-header",
            "styleUrls": [
                "./header.css"
            ],
            "styles": [],
            "template": "<header>  <div class=\"storybook-header\">\n    <div>\n      <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n        <g fill=\"none\" fillRule=\"evenodd\">\n          <path\n            d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n            fill=\"#FFF\"\n          />\n          <path\n            d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n            fill=\"#555AB9\"\n          />\n          <path d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\" fill=\"#91BAF8\" />\n        </g>\n      </svg>\n      <h1>Acme</h1>\n    </div>\n    <div>\n      <div *ngIf=\"user\">\n        <span class=\"welcome\">\n          Welcome, <b>{{ user.name }}</b\n          >!\n        </span>\n        <storybook-button\n          *ngIf=\"user\"\n          size=\"small\"\n          (onClick)=\"onLogout.emit($event)\"\n          label=\"Log out\"\n        ></storybook-button>\n      </div>\n      <div *ngIf=\"!user\">\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          class=\"margin-left\"\n          (onClick)=\"onLogin.emit($event)\"\n          label=\"Log in\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          [primary]=\"true\"\n          class=\"margin-left\"\n          (onClick)=\"onCreateAccount.emit($event)\"\n          label=\"Sign up\"\n        ></storybook-button>\n      </div>\n    </div>\n  </div>\n</header>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 66,
                    "type": "User | null",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 75,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 69,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 72,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "ButtonComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { ButtonComponent } from './button.component';\nimport type { User } from './user';\n\n@Component({\n  selector: 'storybook-header',\n  standalone: true,\n  imports: [CommonModule, ButtonComponent],\n  template: `<header>\n  <div class=\"storybook-header\">\n    <div>\n      <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n        <g fill=\"none\" fillRule=\"evenodd\">\n          <path\n            d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n            fill=\"#FFF\"\n          />\n          <path\n            d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n            fill=\"#555AB9\"\n          />\n          <path d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\" fill=\"#91BAF8\" />\n        </g>\n      </svg>\n      <h1>Acme</h1>\n    </div>\n    <div>\n      <div *ngIf=\"user\">\n        <span class=\"welcome\">\n          Welcome, <b>{{ user.name }}</b\n          >!\n        </span>\n        <storybook-button\n          *ngIf=\"user\"\n          size=\"small\"\n          (onClick)=\"onLogout.emit($event)\"\n          label=\"Log out\"\n        ></storybook-button>\n      </div>\n      <div *ngIf=\"!user\">\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          class=\"margin-left\"\n          (onClick)=\"onLogin.emit($event)\"\n          label=\"Log in\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          [primary]=\"true\"\n          class=\"margin-left\"\n          (onClick)=\"onCreateAccount.emit($event)\"\n          label=\"Sign up\"\n        ></storybook-button>\n      </div>\n    </div>\n  </div>\n</header>`,\n  styleUrls: ['./header.css'],\n})\nexport class HeaderComponent {\n  @Input()\n  user: User | null = null;\n\n  @Output()\n  onLogin = new EventEmitter<Event>();\n\n  @Output()\n  onLogout = new EventEmitter<Event>();\n\n  @Output()\n  onCreateAccount = new EventEmitter<Event>();\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\n  padding: 15px 20px;\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n}\n\n.storybook-header svg {\n  display: inline-block;\n  vertical-align: top;\n}\n\n.storybook-header h1 {\n  display: inline-block;\n  vertical-align: top;\n  margin: 6px 0 6px 10px;\n  font-weight: 700;\n  font-size: 20px;\n  line-height: 1;\n}\n\n.storybook-header button + button {\n  margin-left: 10px;\n}\n\n.storybook-header .welcome {\n  margin-right: 10px;\n  color: #333;\n  font-size: 14px;\n}\n",
                    "styleUrl": "./header.css"
                }
            ],
            "stylesData": "",
            "extends": []
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-aa381b1c478c98672c48622a0c72e83708c8288ae8f36ad63bf82681fbeccf27f9e310ee235ed233782bd5fbfee57b6d63cb85dd75044161ccfc3cdb626f2de0-1",
            "file": "src/app/shared/components/header/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-header",
            "styleUrls": [
                "./header.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./header.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "menuOpen",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "methodsClass": [
                {
                    "name": "logout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "toggleMenu",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "RouterModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common'\nimport { Component } from '@angular/core'\nimport { Router, RouterModule } from '@angular/router'\nimport { AuthService } from '@app/features/auth/service'\n\n@Component({\n  selector: 'app-header',\n  templateUrl: './header.component.html',\n  styleUrls: ['./header.component.scss'],\n  imports: [CommonModule, RouterModule],\n})\nexport class HeaderComponent {\n  menuOpen = false\n\n  constructor(private router: Router, private authService: AuthService) {}\n\n  toggleMenu(): void {\n    this.menuOpen = !this.menuOpen\n  }\n\n  logout(): void {\n    this.authService.signout()\n    this.router.navigate(['/login'])\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "/* Ensure the dropdown menu works nicely */\nheader {\n  .dropdown-menu {\n    display: none;\n  }\n\n  .dropdown-menu.open {\n    display: block;\n  }\n}\n",
                    "styleUrl": "./header.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "HeaderComponent-1",
            "templateData": "<header class=\"bg-blue-600 text-white shadow-md\">\n  <div class=\"container mx-auto px-6 py-4 flex justify-between items-center\">\n    <!-- Left Section (Logo) -->\n    <div class=\"flex items-center\">\n      <a routerLink=\"/\" class=\"text-2xl font-bold hover:underline\">Image Uploader</a>\n    </div>\n\n    <!-- Center Section (Navigation Links Aligned to the Right) -->\n    <nav class=\"hidden md:flex items-center space-x-6 ml-auto mr-6\">\n      <a routerLink=\"/images\" routerLinkActive=\"font-bold underline\" class=\"hover:underline\">Images</a>\n      <a routerLink=\"/images/new\" routerLinkActive=\"font-bold underline\" class=\"hover:underline\">Create New Image</a>\n    </nav>\n\n    <!-- Right Section (Logout and Dropdown) -->\n    <div class=\"relative flex items-center space-x-4\">\n      <!-- Logout Button for Larger Screens -->\n      <button (click)=\"logout()\"\n        class=\"hidden md:block text-sm bg-white text-blue-600 px-4 py-2 rounded-lg hover:bg-gray-100\">\n        Logout\n      </button>\n\n      <!-- Dropdown Menu for Mobile -->\n      <div class=\"md:hidden\">\n        <button (click)=\"toggleMenu()\" class=\"flex items-center space-x-2 focus:outline-none\">\n          <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-6 w-6\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n            <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M4 6h16M4 12h16m-7 6h7\" />\n          </svg>\n        </button>\n\n        <!-- Dropdown Links -->\n        <div *ngIf=\"menuOpen\"\n          class=\"absolute right-0 top-full mt-2 w-48 bg-white text-blue-600 shadow-lg rounded-lg py-2 z-10\">\n          <a routerLink=\"/images\" routerLinkActive=\"font-bold\" class=\"block px-4 py-2 hover:bg-blue-50\">\n            Images\n          </a>\n          <a routerLink=\"/images/new\" routerLinkActive=\"font-bold\" class=\"block px-4 py-2 hover:bg-blue-50\">\n            Create New Image\n          </a>\n          <button (click)=\"logout()\"\n            class=\"font-bold block w-full text-left px-4 py-2 bg-white text-blue-600 rounded-lg hover:bg-gray-100\">\n            Logout\n          </button>\n        </div>\n      </div>\n    </div>\n  </div>\n</header>"
        },
        {
            "name": "ImageListComponent",
            "id": "component-ImageListComponent-529a07f57b092bbd26393f6031867ea732715a1992ad142d204989ccddbad1db6733b268f4bc91c39f651754c5174ffb24d0fc3245a8da081cd04a30b28e907c",
            "file": "src/app/features/images/components/image-list/image-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "global-image-list",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./image-list.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "images",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "ImageResponse[]",
                    "decorators": []
                },
                {
                    "name": "isActive",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "noImagesMessage",
                    "defaultValue": "'No images found'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "title",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onDelete",
                    "defaultValue": "new EventEmitter<number>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "EventEmitter"
                },
                {
                    "name": "onRestore",
                    "defaultValue": "new EventEmitter<number>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "handleDelete",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleRestore",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common'\nimport { Component, EventEmitter, Input, Output } from '@angular/core'\nimport { ImageResponse } from '../../images.type'\n\n@Component({\n  selector: 'global-image-list',\n  standalone: true,\n  imports: [CommonModule],\n  templateUrl: './image-list.component.html',\n  styleUrl: './image-list.component.scss',\n})\nexport class ImageListComponent {\n  @Input() title: string = ''\n  @Input() images: ImageResponse[] = []\n  @Input() noImagesMessage: string = 'No images found'\n  @Input() isActive: boolean = true\n\n  @Output() onDelete = new EventEmitter<number>()\n  @Output() onRestore = new EventEmitter<number>()\n\n  constructor() {}\n\n  // ngOnInit() {\n  //   console.log('ImageListComponent initialized')\n  // }\n\n  handleDelete(id: number) {\n    this.onDelete.emit(id)\n  }\n\n  handleRestore(id: number) {\n    this.onRestore.emit(id)\n  }\n}\n",
            "styleUrl": "./image-list.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 19
            },
            "extends": [],
            "templateData": "<div class=\"grid gap-4 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-3\">\n  <div *ngFor=\"let image of images\" class=\"image-card relative rounded-lg shadow-md overflow-hidden\">\n    <div class=\"relative h-64 p-6\">\n      <img [src]=\"image.path\" [alt]=\"image.description\" [ngClass]=\"{ 'object-contain': true }\" class=\" w-full h-full\" />\n    </div>\n\n    <div class=\"p-2 bg-black/50\">\n      <button *ngIf=\"isActive\" (click)=\"handleDelete(image.id)\"\n        class=\"w-full px-3 py-1.5 text-white bg-red-500 hover:bg-red-600 rounded\">\n        Delete\n      </button>\n      <button *ngIf=\"!isActive\" (click)=\"handleRestore(image.id)\"\n        class=\"w-full px-3 py-1.5 text-white bg-green-500 hover:bg-green-600 rounded\">\n        Restore\n      </button>\n    </div>\n  </div>\n</div>"
        },
        {
            "name": "ImagesComponent",
            "id": "component-ImagesComponent-d1819379d80cd75986682f6ebbe92319750304f2786963189e67d9061061260d4d75ff49c6da2d5c33854ba435ad138e7190f5b3b415c255a64a768efbda45f7",
            "file": "src/app/features/images/list/images.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-image-list",
            "styleUrls": [
                "./images.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./images.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "activeImages",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ImageResponse[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "activePagination",
                    "defaultValue": "{ page: 1, limit: 10, totalPages: 1 }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "activeTab",
                    "defaultValue": "'active'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "error",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "inactiveImages",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ImageResponse[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "inactivePagination",
                    "defaultValue": "{ page: 1, limit: 10, totalPages: 1 }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "isActive",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "isLoading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "methodsClass": [
                {
                    "name": "deleteImage",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 69,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "loadImages",
                    "args": [
                        {
                            "name": "isActive",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "isActive",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "restoreImage",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 87,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "switchTab",
                    "args": [
                        {
                            "name": "tab",
                            "type": "\"active\" | \"inactive\"",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 82,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "tab",
                            "type": "\"active\" | \"inactive\"",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "RouterModule",
                    "type": "module"
                },
                {
                    "name": "ImageListComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core'\nimport { ImagesService } from '../service/images.service'\nimport { ImageResponse } from '../images.type'\nimport { CommonModule } from '@angular/common'\nimport { RouterModule } from '@angular/router'\nimport { ImageListComponent } from '../components/image-list/image-list.component'\n\n@Component({\n  selector: 'app-image-list',\n  templateUrl: './images.component.html',\n  styleUrls: ['./images.component.scss'],\n  imports: [CommonModule, RouterModule, ImageListComponent],\n})\nexport class ImagesComponent implements OnInit {\n  activeImages: ImageResponse[] = []\n  inactiveImages: ImageResponse[] = []\n  activePagination = { page: 1, limit: 10, totalPages: 1 }\n  inactivePagination = { page: 1, limit: 10, totalPages: 1 }\n  isLoading = false\n  error = ''\n  activeTab = 'active'\n  isActive: boolean = true\n\n  constructor(private imagesService: ImagesService) {}\n\n  ngOnInit() {\n    // Subscribe to reactive streams\n    this.imagesService.activeImages$.subscribe(response => {\n      console.log('Active Images Response:', response)\n      this.activeImages = response.items\n      this.activePagination.totalPages = response.totalPages\n    })\n\n    this.imagesService.inactiveImages$.subscribe(response => {\n      console.log('inactiveImages Images Response:', response)\n      this.inactiveImages = response.items\n      this.inactivePagination.totalPages = response.totalPages\n    })\n\n    // Load initial data\n    this.loadImages(true)\n    this.loadImages(false)\n  }\n\n  loadImages(isActive: boolean) {\n    const pagination = isActive\n      ? this.activePagination\n      : this.inactivePagination\n    this.isLoading = true\n\n    this.imagesService\n      .getListImages({\n        isActive,\n        page: pagination.page,\n        limit: pagination.limit,\n      })\n      .subscribe({\n        next: () => {\n          this.isLoading = false // Reactive streams handle data updates\n        },\n        error: err => {\n          console.error('Failed to load images:', err)\n          this.error = 'Failed to load images.'\n          this.isLoading = false\n        },\n      })\n  }\n\n  deleteImage(id: number) {\n    console.log('deleteImage id', id)\n    if (!confirm('Are you sure you want to delete this image?')) return\n\n    this.imagesService.deleteImage(id).subscribe({\n      next: () => console.log(`Image with ID ${id} deleted.`),\n      error: err => {\n        console.error('Failed to delete image:', err)\n        this.error = 'Failed to delete image.'\n      },\n    })\n  }\n\n  switchTab(tab: 'active' | 'inactive') {\n    this.activeTab = tab\n    this.isActive = tab === 'active'\n  }\n\n  restoreImage(id: number) {\n    console.log('restoreImage id', id)\n    this.imagesService.restoreImage(id).subscribe({\n      next: () => console.log(`Image ${id} restored`),\n      error: err => {\n        console.error('Failed to restore image:', err)\n        this.error = 'Failed to restore image.'\n      },\n    })\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".tab.active {\n  @apply border-b-2 border-blue-500 text-blue-600 font-medium;\n}\n\n.tab {\n  @apply text-gray-500 hover:text-gray-700 font-medium;\n}",
                    "styleUrl": "./images.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "imagesService",
                        "type": "ImagesService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 22,
                "jsdoctags": [
                    {
                        "name": "imagesService",
                        "type": "ImagesService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"container mx-auto p-4\">\n  <div class=\"flex justify-between items-center mb-6\">\n    <h1 class=\"text-2xl font-bold\">Images</h1>\n    <a routerLink=\"/images/new\" class=\"px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700\">Add Image</a>\n  </div>\n\n  <div class=\"mb-4 text-gray-600 h-12\">\n    <p *ngIf=\"activeTab === 'inactive' && inactiveImages.length > 0\">\n      <strong>Note:</strong> Image will be deleted in <span class=\"text-red-500 font-semibold\">1 hour</span>. If\n      you change your mind, restore your image.\n    </p>\n  </div>\n\n\n  <div class=\"tabs flex border-b border-gray-200 mb-12\">\n    <button class=\"tab px-4 py-2\" [class.active]=\"activeTab === 'active'\" (click)=\"switchTab('active')\">\n      Active Images\n    </button>\n    <button class=\"tab px-4 py-2\" [class.active]=\"activeTab === 'inactive'\" (click)=\"switchTab('inactive')\">\n      Deleted Images\n    </button>\n  </div>\n\n  <ng-container *ngIf=\"!isLoading\">\n    <div [ngSwitch]=\"activeTab\">\n      <div *ngSwitchCase=\"'active'\">\n        <global-image-list [title]=\"'Active Image'\" [images]=\"activeImages\" [noImagesMessage]=\"'No active images found'\"\n          [isActive]=\"isActive\" (onDelete)=\"deleteImage($event)\"></global-image-list>\n      </div>\n\n      <div *ngSwitchCase=\"'inactive'\">\n        <global-image-list [title]=\"'Inactive Image'\" [images]=\"inactiveImages\"\n          [noImagesMessage]=\"'No inactive images found'\" [isActive]=\"isActive\"\n          (onRestore)=\"restoreImage($event)\"></global-image-list>\n      </div>\n    </div>\n  </ng-container>\n\n</div>\n\n\n<!-- <ng-container *ngIf=\"!isLoading\">\n  <div *ngIf=\"activeTab === 'active'\">\n\n    <div *ngIf=\"activeImages.length === 0\">No active images found</div>\n    <div *ngFor=\"let image of activeImages\" class=\"image-card\">\n      <img [src]=\"image.filename\" [alt]=\"image.description\" />\n      <button (click)=\"deleteImage(image.id)\">Delete</button>\n    </div>\n\n  <div *ngFor=\"let image of inactiveImages\" class=\"image-card\">\n      <img [src]=\"image.filename\" [alt]=\"image.description\" />\n      <button (click)=\"restoreImage(image.id)\">Restore</button>\n    </div>\n</ng-container> -->\n\n<!-- Router outlet for nested routes -->\n<router-outlet></router-outlet>"
        },
        {
            "name": "LoginComponent",
            "id": "component-LoginComponent-a82444f9e5efa2d92da5a4fea3557fae00a8bb414eda6c2eb64303b3bfc99ffc80875697a61709ac9a9752196a5d0a6c0874bf3a142c6502405d4abef4d11111",
            "file": "src/app/features/auth/login/login.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-login",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./login.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "apiError",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "errorMessages",
                    "defaultValue": "{\n    email: {\n      required: 'Email is required',\n      email: 'Please enter a valid email',\n    },\n    password: {\n      required: 'Password is required',\n      minlength: 'Password must be at least 6 characters',\n    },\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ErrorMessages",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "isLoading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "loginForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 41
                }
            ],
            "methodsClass": [
                {
                    "name": "getErrorMessage",
                    "args": [
                        {
                            "name": "controlName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "controlName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "prefillGuestAccount",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 100,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "FormsModule",
                    "type": "module"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                },
                {
                    "name": "RouterModule",
                    "type": "module"
                },
                {
                    "name": "TextComponent",
                    "type": "component"
                },
                {
                    "name": "PasswordComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common'\nimport { Component } from '@angular/core'\nimport {\n  FormBuilder,\n  FormGroup,\n  FormsModule,\n  ReactiveFormsModule,\n  Validators,\n} from '@angular/forms'\nimport { ActivatedRoute, Router, RouterModule } from '@angular/router'\nimport { TextComponent } from '@app/shared/components/input/text/text.component'\nimport { ErrorMessages, LoginRequest } from './login.type'\nimport { PasswordComponent } from '@app/shared/components/input/password/password.component'\nimport { AuthService } from '../service'\n\n@Component({\n  selector: 'app-login',\n  imports: [\n    CommonModule, //The CommonModule provides structural directives such as *ngIf, *ngFor, *ngSwitch, and others.\n    FormsModule,\n    ReactiveFormsModule,\n    RouterModule,\n    TextComponent,\n    PasswordComponent,\n  ],\n  templateUrl: './login.component.html',\n  styleUrl: './login.component.scss',\n})\nexport class LoginComponent {\n  errorMessages: ErrorMessages = {\n    email: {\n      required: 'Email is required',\n      email: 'Please enter a valid email',\n    },\n    password: {\n      required: 'Password is required',\n      minlength: 'Password must be at least 6 characters',\n    },\n  }\n\n  loginForm: FormGroup\n  isLoading = false\n  apiError = ''\n\n  constructor(\n    private fb: FormBuilder,\n    private authService: AuthService,\n    private router: Router,\n    private route: ActivatedRoute, // check router params\n  ) {\n    this.loginForm = this.fb.group({\n      email: ['', [Validators.required, Validators.email]],\n      password: ['', [Validators.required, Validators.minLength(6)]],\n    })\n\n    this.route.queryParams.subscribe(params => {\n      if (params['guest']) {\n        this.prefillGuestAccount()\n      }\n    })\n  }\n\n  getErrorMessage(controlName: string): string {\n    const control = this.loginForm.get(controlName)\n    if (control && control.errors && (control.dirty || control.touched)) {\n      const errors = Object.keys(control.errors)\n\n      return this.errorMessages[controlName][errors[0]] || 'Invalid field'\n    }\n\n    return ''\n  }\n\n  onSubmit(): void {\n    if (this.loginForm.invalid) {\n      Object.keys(this.loginForm.controls).forEach(key => {\n        const control = this.loginForm.get(key)\n        if (control) {\n          control.markAsTouched()\n        }\n      })\n      return\n    }\n\n    this.isLoading = true\n    const loginData: LoginRequest = this.loginForm.value\n\n    this.authService.signin(loginData).subscribe({\n      next: _response => {\n        this.router.navigate(['/images'])\n      },\n      error: err => {\n        this.isLoading = false\n        this.apiError = 'Login failed. Please check your credentials.'\n        console.error('Error:', err)\n      },\n    })\n  }\n\n  private prefillGuestAccount(): void {\n    this.loginForm.patchValue({\n      email: 'john@example.com',\n      password: 'password123',\n    })\n  }\n}\n",
            "styleUrl": "./login.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 43,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<div class=\"flex flex-wrap w-screen h-screen auth-layout\">\n  <!-- Form Section -->\n  <div class=\"flex flex-col justify-center items-center w-full px-6 lg:w-1/2 bg-white bg-opacity-80 lg:bg-transparent\">\n    <div class=\"text-center mb-8\">\n      <h1 class=\"text-3xl lg:text-4xl font-bold leading-tight text-gray-800 mb-4\">Sign in here</h1>\n      <p class=\"text-gray-600\">\n        If you don’t have an account, register.\n        <a class=\"font-bold text-blue-800 hover:underline\" routerLink=\"/register\">Register here!</a>\n      </p>\n    </div>\n\n    <form [formGroup]=\"loginForm\" class=\"flex flex-col gap-4 w-full max-w-md bg-white shadow-lg rounded-lg p-6\"\n      (ngSubmit)=\"onSubmit()\">\n      <global-input-text formControlName=\"email\" [errorMessage]=\"getErrorMessage('email')\" label=\"Email\"\n        placeholder=\"Enter your email\" [required]=\"true\">\n      </global-input-text>\n\n      <global-input-password formControlName=\"password\" placeholder=\"Enter password\" label=\"Password\" [required]=\"true\"\n        [passwordErrorMessage]=\"getErrorMessage('password')\">\n      </global-input-password>\n\n      <button class=\"py-2 text-white bg-blue-600 hover:bg-blue-700 rounded-lg font-semibold transition-all\"\n        type=\"submit\">\n        Login\n      </button>\n    </form>\n  </div>\n\n  <!-- Image Section (Desktop Only) -->\n  <div class=\"hidden lg:flex items-center justify-center w-full lg:w-1/2 h-full bg-blue-50\">\n    <img src=\"assets/images/auth.jpg\" alt=\"Login illustration\" class=\"w-full max-w-lg rounded-lg shadow-lg\" />\n  </div>\n</div>"
        },
        {
            "name": "PageComponent",
            "id": "component-PageComponent-21dd6eb370b4983b5c21c84d40e6f54d266a9d9af9889e6e76b35c43058bd53b3e451bad089d5adf4bea46647ba10265a2fa8cb15630398e75636307d4817fc6",
            "file": "src/stories/page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-page",
            "styleUrls": [
                "./page.css"
            ],
            "styles": [],
            "template": "<article>  <storybook-header\n    [user]=\"user\"\n    (onLogout)=\"doLogout()\"\n    (onLogin)=\"doLogin()\"\n    (onCreateAccount)=\"doCreateAccount()\"\n  ></storybook-header>\n  <section class=\"storybook-page\">\n    <h2>Pages in Storybook</h2>\n    <p>\n      We recommend building UIs with a\n      <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n        <strong>component-driven</strong>\n      </a>\n      process starting with atomic components and ending with pages.\n    </p>\n    <p>\n      Render pages with mock data. This makes it easy to build and review page states without\n      needing to navigate to them in your app. Here are some handy patterns for managing page data\n      in Storybook:\n    </p>\n    <ul>\n      <li>\n        Use a higher-level connected component. Storybook helps you compose such data from the\n        \"args\" of child component stories\n      </li>\n      <li>\n        Assemble data in the page component from your services. You can mock these services out\n        using Storybook.\n      </li>\n    </ul>\n    <p>\n      Get a guided tutorial on component-driven development at\n      <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n        Storybook tutorials\n      </a>\n      . Read more in the\n      <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n      .\n    </p>\n    <div class=\"tip-wrapper\">\n      <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n      <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n        <g fill=\"none\" fillRule=\"evenodd\">\n          <path\n            d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n            id=\"a\"\n            fill=\"#999\"\n          />\n        </g>\n      </svg>\n      Viewports addon in the toolbar\n    </div>\n  </section>\n</article>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "User | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 69
                }
            ],
            "methodsClass": [
                {
                    "name": "doCreateAccount",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 79,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "doLogin",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "doLogout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "HeaderComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { HeaderComponent } from './header.component';\nimport type { User } from './user';\n\n@Component({\n  selector: 'storybook-page',\n  standalone: true,\n  imports: [CommonModule, HeaderComponent],\n  template: `<article>\n  <storybook-header\n    [user]=\"user\"\n    (onLogout)=\"doLogout()\"\n    (onLogin)=\"doLogin()\"\n    (onCreateAccount)=\"doCreateAccount()\"\n  ></storybook-header>\n  <section class=\"storybook-page\">\n    <h2>Pages in Storybook</h2>\n    <p>\n      We recommend building UIs with a\n      <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n        <strong>component-driven</strong>\n      </a>\n      process starting with atomic components and ending with pages.\n    </p>\n    <p>\n      Render pages with mock data. This makes it easy to build and review page states without\n      needing to navigate to them in your app. Here are some handy patterns for managing page data\n      in Storybook:\n    </p>\n    <ul>\n      <li>\n        Use a higher-level connected component. Storybook helps you compose such data from the\n        \"args\" of child component stories\n      </li>\n      <li>\n        Assemble data in the page component from your services. You can mock these services out\n        using Storybook.\n      </li>\n    </ul>\n    <p>\n      Get a guided tutorial on component-driven development at\n      <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n        Storybook tutorials\n      </a>\n      . Read more in the\n      <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n      .\n    </p>\n    <div class=\"tip-wrapper\">\n      <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n      <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n        <g fill=\"none\" fillRule=\"evenodd\">\n          <path\n            d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n            id=\"a\"\n            fill=\"#999\"\n          />\n        </g>\n      </svg>\n      Viewports addon in the toolbar\n    </div>\n  </section>\n</article>`,\n  styleUrls: ['./page.css'],\n})\nexport class PageComponent {\n  user: User | null = null;\n\n  doLogout() {\n    this.user = null;\n  }\n\n  doLogin() {\n    this.user = { name: 'Jane Doe' };\n  }\n\n  doCreateAccount() {\n    this.user = { name: 'Jane Doe' };\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-page {\n  margin: 0 auto;\n  padding: 48px 20px;\n  max-width: 600px;\n  color: #333;\n  font-size: 14px;\n  line-height: 24px;\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n}\n\n.storybook-page h2 {\n  display: inline-block;\n  vertical-align: top;\n  margin: 0 0 4px;\n  font-weight: 700;\n  font-size: 32px;\n  line-height: 1;\n}\n\n.storybook-page p {\n  margin: 1em 0;\n}\n\n.storybook-page a {\n  color: inherit;\n}\n\n.storybook-page ul {\n  margin: 1em 0;\n  padding-left: 30px;\n}\n\n.storybook-page li {\n  margin-bottom: 8px;\n}\n\n.storybook-page .tip {\n  display: inline-block;\n  vertical-align: top;\n  margin-right: 10px;\n  border-radius: 1em;\n  background: #e7fdd8;\n  padding: 4px 12px;\n  color: #357a14;\n  font-weight: 700;\n  font-size: 11px;\n  line-height: 12px;\n}\n\n.storybook-page .tip-wrapper {\n  margin-top: 40px;\n  margin-bottom: 40px;\n  font-size: 13px;\n  line-height: 20px;\n}\n\n.storybook-page .tip-wrapper svg {\n  display: inline-block;\n  vertical-align: top;\n  margin-top: 3px;\n  margin-right: 4px;\n  width: 12px;\n  height: 12px;\n}\n\n.storybook-page .tip-wrapper svg path {\n  fill: #1ea7fd;\n}\n",
                    "styleUrl": "./page.css"
                }
            ],
            "stylesData": "",
            "extends": []
        },
        {
            "name": "PasswordComponent",
            "id": "component-PasswordComponent-4c921684f69fcffccf37f69bd30abefe6ef875d7c6baf0a16ded9b6575987ce966562e9702e6ab79eaf67da62460a1fc6049e1269c7d988a9fd21e5e6e94285e",
            "file": "src/app/shared/components/input/password/password.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => PasswordComponent), multi: true,\n}",
                    "type": "component"
                }
            ],
            "selector": "global-input-password",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./password.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "icon",
                    "defaultValue": "'lock'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "inputClass",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "labelClass",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "passwordErrorMessage",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "placeholder",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "required",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "type",
                    "defaultValue": "'password'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "onChange",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "onTouch",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "value",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 30
                }
            ],
            "methodsClass": [
                {
                    "name": "handlePasswordInput",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common'\nimport { Component, forwardRef, Input } from '@angular/core'\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms'\n\n@Component({\n  selector: 'global-input-password',\n  standalone: true,\n  imports: [CommonModule],\n  templateUrl: './password.component.html',\n  styleUrl: './password.component.scss',\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => PasswordComponent),\n      multi: true,\n    },\n  ],\n})\nexport class PasswordComponent implements ControlValueAccessor {\n  @Input() name?: string\n  @Input() icon: string = 'lock'\n  @Input() type: string = 'password'\n  @Input() label: string = ''\n  @Input() placeholder: string = ''\n  @Input() required: boolean = true\n  @Input() inputClass: string = ''\n  @Input() labelClass: string = ''\n  @Input() passwordErrorMessage: string = ''\n\n  value: string = ''\n  disabled: boolean = false\n\n  // Initial empty functions\n  onChange = (value: string) => {} // Placeholder until form control registers\n  onTouch = () => {}\n\n  writeValue(value: string): void {\n    this.value = value\n  }\n\n  registerOnChange(fn: any): void {\n    console.log('registerOnChange')\n    this.onChange = fn\n  }\n\n  registerOnTouched(fn: any): void {\n    this.onTouch = fn\n  }\n\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled\n  }\n\n  handlePasswordInput(event: Event): void {\n    const input = event.target as HTMLInputElement\n    this.value = input.value\n    this.onChange(this.value)\n    this.onTouch()\n  }\n}\n",
            "styleUrl": "./password.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "implements": [
                "ControlValueAccessor"
            ],
            "templateData": "<div>\n  <label [ngClass]=\"labelClass\">{{label}} <span *ngIf=\"required\">*</span></label>\n  <div class=\"flex items-center gap-2\">\n    <input class=\"grow input input-bordered\" [value]=\"value\" (input)=\"handlePasswordInput($event)\" [type]=\"type\"\n      [required]=\"required\" [placeholder]=\"placeholder\" [ngClass]=\"inputClass\" />\n  </div>\n  <div *ngIf=\"passwordErrorMessage\" class=\"text-xs text-red-500\">{{passwordErrorMessage}}</div>\n</div>"
        },
        {
            "name": "RegisterComponent",
            "id": "component-RegisterComponent-ebdf06f8197c1cc716524a0152c12468a8affecaa61a1f998297c3b90bbcfbace5a7f9a93769601324abde4b8a6fff932c27237be2f15b78f5dfe112a2e63e1a",
            "file": "src/app/features/auth/register/register.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-register",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./register.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "apiError",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 48
                },
                {
                    "name": "errorMessages",
                    "defaultValue": "{\n    email: {\n      required: 'Email is required',\n      email: 'Please enter a valid email',\n    },\n    password: {\n      required: 'Password is required',\n      minlength: 'Password must be at least 6 characters',\n    },\n    username: {\n      required: 'Username is required',\n      minlength: 'Username must be at least 3 characters',\n      maxlength: 'Username must be at most 20 characters',\n    },\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ErrorMessages",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "isLoading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 47
                },
                {
                    "name": "registerForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 46
                }
            ],
            "methodsClass": [
                {
                    "name": "getErrorMessage",
                    "args": [
                        {
                            "name": "controlName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 69,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "controlName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 79,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "TextComponent",
                    "type": "component"
                },
                {
                    "name": "PasswordComponent",
                    "type": "component"
                },
                {
                    "name": "FormsModule",
                    "type": "module"
                },
                {
                    "name": "RouterModule",
                    "type": "module"
                },
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core'\nimport { TextComponent } from '../../../shared/components/input/text/text.component'\nimport { PasswordComponent } from '../../../shared/components/input/password/password.component'\nimport {\n  FormBuilder,\n  FormGroup,\n  FormsModule,\n  ReactiveFormsModule,\n  Validators,\n} from '@angular/forms'\nimport { AuthService } from '../service'\nimport { Router, RouterModule } from '@angular/router'\nimport { ErrorMessages } from '../login/login.type'\nimport { CommonModule } from '@angular/common'\n\n@Component({\n  selector: 'app-register',\n  imports: [\n    TextComponent,\n    PasswordComponent,\n    FormsModule,\n    RouterModule,\n    CommonModule,\n    ReactiveFormsModule,\n  ],\n  templateUrl: './register.component.html',\n  styleUrl: './register.component.scss',\n})\nexport class RegisterComponent {\n  errorMessages: ErrorMessages = {\n    email: {\n      required: 'Email is required',\n      email: 'Please enter a valid email',\n    },\n    password: {\n      required: 'Password is required',\n      minlength: 'Password must be at least 6 characters',\n    },\n    username: {\n      required: 'Username is required',\n      minlength: 'Username must be at least 3 characters',\n      maxlength: 'Username must be at most 20 characters',\n    },\n  }\n\n  registerForm: FormGroup\n  isLoading = false\n  apiError = ''\n\n  constructor(\n    private fb: FormBuilder,\n    private authService: AuthService,\n    private router: Router,\n  ) {\n    this.registerForm = this.fb.group({\n      email: ['my.mai@example.com', [Validators.required, Validators.email]],\n      password: ['password123', [Validators.required, Validators.minLength(6)]],\n      username: [\n        'mymai',\n        [\n          Validators.required,\n          Validators.minLength(3),\n          Validators.maxLength(20),\n        ],\n      ],\n    })\n  }\n\n  getErrorMessage(controlName: string): string {\n    const control = this.registerForm.get(controlName)\n    if (control && control.errors && (control.dirty || control.touched)) {\n      const errors = Object.keys(control.errors)\n      return this.errorMessages[controlName][errors[0]]\n    }\n\n    return ''\n  }\n\n  onSubmit(): void {\n    console.log('Register form submitted')\n    this.isLoading = true\n\n    const { email, password, username } = this.registerForm.value\n    console.log('Registering user:', email, password, username)\n\n    console.log('this.registerForm.invalid', this.registerForm.invalid)\n    if (this.registerForm.invalid) {\n      Object.keys(this.registerForm.controls).forEach(key => {\n        const control = this.registerForm.get(key)\n        if (control) {\n          control.markAsTouched()\n        }\n      })\n      return\n    }\n\n    this.authService.register({ email, password, username }).subscribe({\n      next: () => {\n        this.router.navigate(['login'])\n      },\n      error: err => {\n        this.isLoading = false\n        this.apiError = 'Failed to register'\n      },\n    })\n  }\n}\n",
            "styleUrl": "./register.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 48,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<div class=\"flex flex-wrap w-screen h-screen auth-layout\">\n  <!-- Form Section -->\n  <div class=\"flex flex-col justify-center items-center w-full px-6 lg:w-1/2 bg-white bg-opacity-80 lg:bg-transparent\">\n    <div class=\"text-center mb-8\">\n      <h1 class=\"text-3xl lg:text-4xl font-bold leading-tight text-gray-800 mb-4\">Sign in here</h1>\n      <p class=\"text-gray-600\">\n        Already have an account?\n        <a class=\"font-bold text-blue-800 hover:underline\" routerLink=\"/login\">Login here!</a>\n      </p>\n    </div>\n\n    <form [formGroup]=\"registerForm\" class=\"flex flex-col gap-4 w-full max-w-md bg-white shadow-lg rounded-lg p-6\"\n      (ngSubmit)=\"onSubmit()\">\n      <!-- Username Field -->\n      <global-input-text formControlName=\"username\" label=\"Username\" type=\"text\" id=\"username\" [required]=\"true\"\n        [errorMessage]=\"getErrorMessage('username')\"></global-input-text>\n\n      <!-- Email Field -->\n      <global-input-text formControlName=\"email\" label=\"Email\" type=\"email\" id=\"email\" [required]=\"true\"\n        [errorMessage]=\"getErrorMessage('email')\"></global-input-text>\n\n      <!-- Password Field -->\n      <global-input-password formControlName=\"password\" label=\"Password\" id=\"password\" [required]=\"true\"\n        [passwordErrorMessage]=\"getErrorMessage('password')\"></global-input-password>\n\n      <!-- Submit Button -->\n      <button type=\"submit\"\n        class=\"py-3 text-white bg-blue-600 rounded-lg hover:bg-blue-700 focus:outline-none focus:ring-4 focus:ring-blue-300 font-semibold transition-all\">\n        Create Account\n      </button>\n    </form>\n  </div>\n\n  <!-- Image Section (Desktop Only) -->\n  <div class=\"hidden lg:flex items-center justify-center w-full lg:w-1/2 h-full bg-blue-50\">\n    <img src=\"assets/images/auth.jpg\" alt=\"Login illustration\" class=\"w-full max-w-lg rounded-lg shadow-lg\" />\n  </div>\n</div>"
        },
        {
            "name": "TextComponent",
            "id": "component-TextComponent-e91f73f9bd8779852e149b286e2f8edc981e502b063fa22cf1ef2fe017a55f20589fa996ec91aadfe3baee3b5f8c8c20dfce301e369ee7a29584fad53532fb63",
            "file": "src/app/shared/components/input/text/text.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => TextComponent), multi: true,\n}",
                    "type": "component"
                }
            ],
            "selector": "global-input-text",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./text.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "errorMessage",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 43,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "icon",
                    "defaultValue": "'mail_outline'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 36,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "inputClass",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 41,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 38,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "labelClass",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 42,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 35,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "placeholder",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 39,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "required",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 40,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "type",
                    "defaultValue": "'text'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 37,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 46
                },
                {
                    "name": "onChange",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 49
                },
                {
                    "name": "onTouch",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 50
                },
                {
                    "name": "value",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 45
                }
            ],
            "methodsClass": [
                {
                    "name": "handleInput",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 70,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 62,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common'\nimport { Component, forwardRef, Input } from '@angular/core'\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms'\n\n// Common event bindings:\n\n// (input) - when value changes (typing)\n// (click) - when element is clicked\n// (change) - when value changes AND input loses focus\n// (blur) - when input loses focus\n// (focus) - when input gains focus\n\n@Component({\n  selector: 'global-input-text',\n  standalone: true,\n  imports: [CommonModule],\n  templateUrl: './text.component.html',\n  styleUrl: './text.component.scss',\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => TextComponent),\n      multi: true,\n    },\n  ],\n})\n\n// when we use ControlValueAccessor\n// need to implement 3 methods\n// 1. writeValue:  Called by Angular to write a value to the input\n// 2. registerOnChange:  Registers a callback function for value changes\n// 3. registerOnTouched: Registers a callback function for touch events\nexport class TextComponent implements ControlValueAccessor {\n  // @Input({ required: true }) name!: string;\n  @Input() name?: string\n  @Input() icon: string = 'mail_outline'\n  @Input() type: string = 'text'\n  @Input() label: string = ''\n  @Input() placeholder: string = ''\n  @Input() required: boolean = false\n  @Input() inputClass: string = ''\n  @Input() labelClass: string = ''\n  @Input() errorMessage: string = ''\n\n  value: string = ''\n  disabled: boolean = false\n\n  // Initial empty functions\n  onChange = (value: any) => {} // Placeholder until form control registers\n  onTouch = () => {} // Placeholder until form control registers\n\n  writeValue(value: any): void {\n    this.value = value\n  }\n\n  // Later, Angular calls these registration methods\n  registerOnChange(fn: any): void {\n    console.log('TextComponent registerOnChange') // Shows in terminal due to SSR\n    this.onChange = fn // Replace placeholder with actual form control function\n  }\n\n  registerOnTouched(fn: any): void {\n    console.log('TextComponent registerOnTouched') // Shows in terminal due to SSR\n    this.onTouch = fn // Replace placeholder with actual form control function\n  }\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled\n  }\n\n  handleInput(event: Event): void {\n    const input = event.target as HTMLInputElement\n    this.value = input.value\n    this.onChange(this.value) // Without initial declaration, this could be undefined\n    this.onTouch() // Without initial declaration, this could be undefined\n    console.log('value', this.value)\n  }\n}\n",
            "styleUrl": "./text.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "implements": [
                "ControlValueAccessor"
            ],
            "templateData": "<div>\n  <label [ngClass]=\"labelClass\">{{label}} <span *ngIf=\"required\">*</span></label>\n\n  <div class=\"flex items-center gap-2\">\n    <input [value]=\"value\" class=\"grow input input-bordered\" [type]=\"type\" [required]=\"required\"\n      [placeholder]=\"placeholder\" (input)=\"handleInput($event)\" [ngClass]=\"inputClass\" />\n  </div>\n  <div *ngIf=\"errorMessage\" class=\"text-xs text-red-500\">{{errorMessage}}</div>\n</div>"
        },
        {
            "name": "WelcomeComponent",
            "id": "component-WelcomeComponent-ebabd8f35a13d2f81ad09454f892540af026d20765220d5619577032694ba743c97af903ae7926ee714480912508ad0f213342633aca1319ddd979a5e607e670",
            "file": "src/app/features/welcome/welcome.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-welcome",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./welcome.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "RouterModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common'\nimport { Component } from '@angular/core'\nimport { RouterModule } from '@angular/router'\n\n@Component({\n  selector: 'app-welcome',\n  imports: [CommonModule, RouterModule],\n  templateUrl: './welcome.component.html',\n  styleUrl: './welcome.component.scss',\n})\nexport class WelcomeComponent {}\n",
            "styleUrl": "./welcome.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"bg-gradient-to-r from-blue-50 to-blue-100\">\n  <!-- Navbar -->\n  <nav class=\"flex items-center justify-between px-6 py-4\">\n    <div class=\"flex items-center space-x-8\">\n      <h1 class=\"text-gray-900 font-bold text-2xl\">Image Uploader</h1>\n      <div class=\"hidden md:flex items-center space-x-6\">\n        <a href=\"#\" class=\"text-gray-700 hover:text-blue-600\">Demo with Angular</a>\n        <a href=\"#\" class=\"text-gray-700 hover:text-blue-600\">Demo with React</a>\n        <a href=\"#\" class=\"text-gray-700 hover:text-blue-600\">API with Next.js</a>\n      </div>\n    </div>\n    <div class=\"flex items-center space-x-4\">\n      <a routerLink=\"/register\" class=\"px-4 py-2 bg-white text-blue-600 rounded-3xl hover:bg-gray-200\">Get Started</a>\n      <a routerLink=\"/login\" class=\"px-4 py-2 bg-blue-600 text-white rounded-3xl hover:bg-blue-700\">\n        Log In\n      </a>\n    </div>\n  </nav>\n\n  <!-- Hero Section -->\n  <div class=\"container mx-auto px-6 py-12 flex flex-col lg:flex-row items-center lg:space-x-12\">\n    <!-- Text Content -->\n    <div class=\"lg:w-1/2 mb-12 lg:mb-0\">\n      <h1 class=\"text-gray-900 text-5xl md:text-6xl font-bold leading-tight mb-6\">\n        Image Uploader Demo\n      </h1>\n      <p class=\"text-gray-700 text-lg md:text-xl mb-6\">\n        A platform for uploading and managing images. Check out the frontend demos for Angular, React, and the backend\n        API built with Next.js.\n      </p>\n      <p class=\"text-gray-700 text-lg md:text-xl mb-8\">\n        Create an account to explore the entire platform or try it as a guest user.\n      </p>\n      <div class=\"flex space-x-4\">\n        <a routerLink=\"/register\" class=\"px-6 py-3 bg-blue-600 text-white rounded-3xl font-semibold hover:bg-blue-700\">\n          Create Account\n        </a>\n        <a routerLink=\"/login\" [queryParams]=\"{ guest: true }\"\n          class=\"px-6 py-3 bg-white text-blue-600 rounded-3xl font-semibold hover:bg-gray-200\">\n          Try with Example Account\n        </a>\n      </div>\n    </div>\n\n    <!-- Image Section -->\n    <div class=\"lg:w-1/2 flex justify-end\">\n      <div class=\"relative\">\n        <!-- Desktop app image -->\n        <img src=\"assets/images/desktop.jpg\" alt=\"Desktop app\" class=\"w-full max-w-lg rounded-lg shadow-2xl\" />\n      </div>\n    </div>\n  </div>\n</div>\n\n<div class=\"container mx-auto px-6 py-12\">\n  <h2 class=\"text-gray-900 text-4xl font-bold text-center mb-12\">Technologies Used</h2>\n  <div class=\"grid grid-cols-2 md:grid-cols-4 gap-12 text-center\">\n    <!-- Angular -->\n    <div class=\"p-4 bg-white rounded-lg shadow-md hover:shadow-lg transition\">\n      <img src=\"assets/images/logo/angular.svg\" alt=\"Angular Logo\" class=\"h-20 mx-auto mb-4\" />\n      <p class=\"text-gray-800 font-bold text-lg\">Angular</p>\n    </div>\n    <!-- React -->\n    <div class=\"p-4 bg-white rounded-lg shadow-md hover:shadow-lg transition\">\n      <img src=\"assets/images/logo/reactjs.svg\" alt=\"React Logo\" class=\"h-20 mx-auto mb-4\" />\n      <p class=\"text-gray-800 font-bold text-lg\">React.js</p>\n    </div>\n    <!-- Redux Toolkit -->\n    <div class=\"p-4 bg-white rounded-lg shadow-md hover:shadow-lg transition\">\n      <img src=\"assets/images/logo/redux.svg\" alt=\"Redux Toolkit Logo\" class=\"h-20 mx-auto mb-4\" />\n      <p class=\"text-gray-800 font-bold text-lg\">Redux Toolkit</p>\n    </div>\n    <!-- Tailwind -->\n    <div class=\"p-4 bg-white rounded-lg shadow-md hover:shadow-lg transition\">\n      <img src=\"assets/images/logo/tailwind.svg\" alt=\"Tailwind Logo\" class=\"h-20 mx-auto mb-4\" />\n      <p class=\"text-gray-800 font-bold text-lg\">Tailwind</p>\n    </div>\n    <!-- Next.js -->\n    <div class=\"p-4 bg-white rounded-lg shadow-md hover:shadow-lg transition\">\n      <img src=\"assets/images/logo/nestjs.svg\" alt=\"Next.js Logo\" class=\"h-20 mx-auto mb-4\" />\n      <p class=\"text-gray-800 font-bold text-lg\">Next.js</p>\n    </div>\n    <!-- Docker -->\n    <div class=\"p-4 bg-white rounded-lg shadow-md hover:shadow-lg transition\">\n      <img src=\"assets/images/logo/docker.svg\" alt=\"Docker Logo\" class=\"h-20 mx-auto mb-4\" />\n      <p class=\"text-gray-800 font-bold text-lg\">Docker</p>\n    </div>\n    <!-- Azure -->\n    <div class=\"p-4 bg-white rounded-lg shadow-md hover:shadow-lg transition\">\n      <img src=\"assets/images/logo/azure.svg\" alt=\"Azure Logo\" class=\"h-20 mx-auto mb-4\" />\n      <p class=\"text-gray-800 font-bold text-lg\">Azure</p>\n    </div>\n    <!-- AWS S3 -->\n    <div class=\"p-4 bg-white rounded-lg shadow-md hover:shadow-lg transition\">\n      <img src=\"assets/images/logo/aws.svg\" alt=\"AWS S3 Logo\" class=\"h-20 mx-auto mb-4\" />\n      <p class=\"text-gray-800 font-bold text-lg\">AWS S3</p>\n    </div>\n  </div>\n</div>\n\n<div class=\"container mx-auto px-6 py-12\">\n  <h2 class=\"text-gray-900 text-3xl font-bold text-center mb-8\">Explore the Demos</h2>\n  <div class=\"grid grid-cols-1 md:grid-cols-3 gap-8\">\n    <!-- Angular Demo -->\n    <div class=\"p-6 bg-white rounded-lg shadow-lg flex flex-col items-center\">\n      <img src=\"assets/images/logo/angular.svg\" alt=\"Angular Logo\" class=\"h-16 mb-4\" />\n      <h3 class=\"text-xl font-bold mb-2\">Angular Demo</h3>\n      <p class=\"text-gray-700 text-center mb-4\">\n        Experience the frontend built with Angular showcasing a modern UI and smooth functionality.\n      </p>\n      <a href=\"https://your-angular-demo-link\" target=\"_blank\"\n        class=\"w-full px-6 py-3 bg-blue-600 text-white hover:bg-blue-700 text-white rounded-3xl font-semibold hover:from-blue-600 hover:to-blue-800 text-center\">\n        View Demo\n      </a>\n      <a href=\"https://your-angular-case-study-link\" target=\"_blank\"\n        class=\"w-full px-6 py-3 border border-blue-600 bg-white text-blue-600 hover:bg-gray-100 rounded-3xl font-semibold hover:from-gray-600 hover:to-gray-800 mt-4 text-center\">\n        Case Study\n      </a>\n    </div>\n\n    <!-- React Demo -->\n    <div class=\"p-6 bg-white rounded-lg shadow-lg flex flex-col items-center\">\n      <img src=\"assets/images/logo/reactjs.svg\" alt=\"React Logo\" class=\"h-16 mb-4\" />\n      <h3 class=\"text-xl font-bold mb-2\">React Demo</h3>\n      <p class=\"text-gray-700 text-center mb-4\">\n        A frontend built with React.js, using <strong>Redux Toolkit</strong> for state management to handle complex app\n        logic efficiently.\n      </p>\n      <a href=\"https://your-react-demo-link\" target=\"_blank\"\n        class=\"w-full px-6 py-3 bg-blue-600 text-white hover:bg-blue-700 text-white rounded-3xl font-semibold hover:from-blue-600 hover:to-blue-800 text-center\">\n        View Demo\n      </a>\n      <a href=\"https://your-react-case-study-link\" target=\"_blank\"\n        class=\"w-full px-6 py-3 border border-blue-600 bg-white text-blue-600 hover:bg-gray-100 rounded-3xl font-semibold hover:from-gray-600 hover:to-gray-800 mt-4 text-center\">\n        Case Study\n      </a>\n    </div>\n\n    <!-- Next.js Swagger API -->\n    <div class=\"p-6 bg-white rounded-lg shadow-lg flex flex-col items-center\">\n      <img src=\"assets/images/logo/nestjs.svg\" alt=\"Next.js Logo\" class=\"h-16 mb-4\" />\n      <h3 class=\"text-xl font-bold mb-2\">Next.js API</h3>\n      <p class=\"text-gray-700 text-center mb-4\">\n        Interact with the Next.js API using Swagger. Test endpoints and explore the backend's functionality.\n      </p>\n      <a href=\"https://your-nextjs-swagger-link\" target=\"_blank\"\n        class=\"w-full px-6 py-3 bg-blue-600 text-white hover:bg-blue-700 text-white rounded-3xl font-semibold hover:from-blue-600 hover:to-blue-800 text-center\">\n        View Demo\n      </a>\n      <a href=\"https://your-nextjs-case-study-link\" target=\"_blank\"\n        class=\"w-full px-6 py-3 border border-blue-600 bg-white text-blue-600 hover:bg-gray-100 rounded-3xl font-semibold hover:from-gray-600 hover:to-gray-800 mt-4 text-center\">\n        Case Study\n      </a>\n    </div>\n  </div>\n</div>\n\n\n\n<div class=\"container mx-auto px-6 py-12\">\n  <h2 class=\"text-gray-900 text-3xl font-bold text-center mb-8\">How It’s Deployed</h2>\n  <div class=\"grid grid-cols-1 md:grid-cols-3 gap-8 text-center\">\n    <!-- Docker -->\n    <div class=\"p-6 bg-white rounded-lg shadow-lg\">\n      <img src=\"assets/images/logo/docker.svg\" alt=\"Docker Logo\" class=\"h-16 mx-auto mb-4\" />\n      <h3 class=\"text-xl font-semibold mb-2\">Docker</h3>\n      <p class=\"text-gray-700\">\n        The application is containerized with Docker for consistent development and deployment.\n      </p>\n    </div>\n    <!-- Azure -->\n    <div class=\"p-6 bg-white rounded-lg shadow-lg\">\n      <img src=\"assets/images/logo/azure.svg\" alt=\"Azure Logo\" class=\"h-16 mx-auto mb-4\" />\n      <h3 class=\"text-xl font-semibold mb-2\">Azure</h3>\n      <p class=\"text-gray-700\">\n        The backend is deployed on Azure, ensuring scalability and high availability.\n      </p>\n    </div>\n    <!-- AWS S3 -->\n    <div class=\"p-6 bg-white rounded-lg shadow-lg\">\n      <img src=\"assets/images/logo/aws.svg\" alt=\"AWS S3 Logo\" class=\"h-16 mx-auto mb-4\" />\n      <h3 class=\"text-xl font-semibold mb-2\">AWS S3</h3>\n      <p class=\"text-gray-700\">\n        The frontend is hosted on AWS S3, ensuring fast delivery via a global content delivery network (CDN).\n      </p>\n    </div>\n  </div>\n</div>\n\n<footer class=\"bg-blue-600 text-white py-6 text-center\">\n  <p class=\"text-sm\">© 2025 Image Uploader Demo | Built by <a href=\"https://github.com/mymai91\" class=\"underline\">My\n      Mai</a></p>\n</footer>"
        }
    ],
    "modules": [],
    "miscellaneous": {
        "variables": [
            {
                "name": "angularApp",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/server.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new AngularNodeAppEngine()"
            },
            {
                "name": "app",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/server.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "express()"
            },
            {
                "name": "appConfig",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/app.config.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ApplicationConfig",
                "defaultValue": "{\n  providers: [\n    provideZoneChangeDetection({ eventCoalescing: true }),\n    provideRouter(routes),\n    // provideClientHydration(withEventReplay()),\n    provideHttpClient(withFetch(), withInterceptors([authInterceptor])),\n    importProvidersFrom(NgxDropzoneModule),\n  ],\n}"
            },
            {
                "name": "authInterceptor",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/interceptors/auth.interceptor.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "HttpInterceptorFn",
                "defaultValue": "(req, next) => {\n  const storageService = inject(StorageService)\n  const token = storageService.getItem('accessToken')\n\n  if (token) {\n    req = req.clone({\n      setHeaders: {\n        Authorization: `Bearer ${token}`,\n      },\n    })\n  }\n\n  return next(req)\n}"
            },
            {
                "name": "bootstrap",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/main.server.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "() => bootstrapApplication(AppComponent, config)"
            },
            {
                "name": "browserDistFolder",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/server.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "resolve(serverDistFolder, '../browser')"
            },
            {
                "name": "config",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/app.config.server.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "mergeApplicationConfig(appConfig, serverConfig)"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.development.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  production: false,\n  apiUrl: 'http://localhost:3000/api',\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.production.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  production: true,\n  apiUrl: 'https://api.yourproduction.com', // your production API URL\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  production: false,\n  apiUrl: 'http://localhost:3000',\n}"
            },
            {
                "name": "reqHandler",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/server.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createNodeRequestHandler(app)",
                "rawdescription": "The request handler used by the Angular CLI (dev-server and during build).",
                "description": "<p>The request handler used by the Angular CLI (dev-server and during build).</p>\n"
            },
            {
                "name": "serverConfig",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/app.config.server.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ApplicationConfig",
                "defaultValue": "{\n  providers: [\n    provideServerRendering(),\n    provideServerRoutesConfig(serverRoutes)\n  ]\n}"
            },
            {
                "name": "serverDistFolder",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/server.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "dirname(fileURLToPath(import.meta.url))"
            },
            {
                "name": "serverRoutes",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/app.routes.server.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ServerRoute[]",
                "defaultValue": "[\n  {\n    path: '**',\n    renderMode: RenderMode.Prerender\n  }\n]"
            }
        ],
        "functions": [],
        "typealiases": [],
        "enumerations": [],
        "groupedVariables": {
            "src/server.ts": [
                {
                    "name": "angularApp",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/server.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new AngularNodeAppEngine()"
                },
                {
                    "name": "app",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/server.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "express()"
                },
                {
                    "name": "browserDistFolder",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/server.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "resolve(serverDistFolder, '../browser')"
                },
                {
                    "name": "reqHandler",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/server.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createNodeRequestHandler(app)",
                    "rawdescription": "The request handler used by the Angular CLI (dev-server and during build).",
                    "description": "<p>The request handler used by the Angular CLI (dev-server and during build).</p>\n"
                },
                {
                    "name": "serverDistFolder",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/server.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "dirname(fileURLToPath(import.meta.url))"
                }
            ],
            "src/app/app.config.ts": [
                {
                    "name": "appConfig",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/app.config.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ApplicationConfig",
                    "defaultValue": "{\n  providers: [\n    provideZoneChangeDetection({ eventCoalescing: true }),\n    provideRouter(routes),\n    // provideClientHydration(withEventReplay()),\n    provideHttpClient(withFetch(), withInterceptors([authInterceptor])),\n    importProvidersFrom(NgxDropzoneModule),\n  ],\n}"
                }
            ],
            "src/app/core/interceptors/auth.interceptor.ts": [
                {
                    "name": "authInterceptor",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/interceptors/auth.interceptor.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HttpInterceptorFn",
                    "defaultValue": "(req, next) => {\n  const storageService = inject(StorageService)\n  const token = storageService.getItem('accessToken')\n\n  if (token) {\n    req = req.clone({\n      setHeaders: {\n        Authorization: `Bearer ${token}`,\n      },\n    })\n  }\n\n  return next(req)\n}"
                }
            ],
            "src/main.server.ts": [
                {
                    "name": "bootstrap",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/main.server.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "() => bootstrapApplication(AppComponent, config)"
                }
            ],
            "src/app/app.config.server.ts": [
                {
                    "name": "config",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/app.config.server.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "mergeApplicationConfig(appConfig, serverConfig)"
                },
                {
                    "name": "serverConfig",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/app.config.server.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ApplicationConfig",
                    "defaultValue": "{\n  providers: [\n    provideServerRendering(),\n    provideServerRoutesConfig(serverRoutes)\n  ]\n}"
                }
            ],
            "src/environments/environment.development.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.development.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  production: false,\n  apiUrl: 'http://localhost:3000/api',\n}"
                }
            ],
            "src/environments/environment.production.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.production.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  production: true,\n  apiUrl: 'https://api.yourproduction.com', // your production API URL\n}"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  production: false,\n  apiUrl: 'http://localhost:3000',\n}"
                }
            ],
            "src/app/app.routes.server.ts": [
                {
                    "name": "serverRoutes",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/app.routes.server.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ServerRoute[]",
                    "defaultValue": "[\n  {\n    path: '**',\n    renderMode: RenderMode.Prerender\n  }\n]"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {},
        "groupedTypeAliases": {}
    },
    "routes": [],
    "coverage": {
        "count": 4,
        "status": "low",
        "files": [
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/app.config.server.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "config",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/app.config.server.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "serverConfig",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/app.config.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "appConfig",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/app.routes.server.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "serverRoutes",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/guards/auth.guard.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "RouteData",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/guards/auth.guard.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "AuthGuard",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/guards/authenticated.guard.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "AuthenticatedGuard",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/interceptors/auth.interceptor.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "authInterceptor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/storage/storage.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "StorageService",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/features/auth/login/login.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LoginComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/features/auth/login/login.type.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "EmailErrors",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/features/auth/login/login.type.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ErrorMessages",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/auth/login/login.type.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ErrorType",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/auth/login/login.type.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "LoginRequest",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/features/auth/login/login.type.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "LoginResponse",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/features/auth/login/login.type.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "PasswordErrors",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/features/auth/login/login.type.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "RegisterRequest",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/features/auth/login/login.type.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "RegisterResponse",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/features/auth/register/register.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "RegisterComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/features/auth/service/auth.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AuthService",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/features/images/components/image-list/image-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ImageListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/features/images/images.type.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ImageResponse",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/features/images/images.type.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ListImagesResponse",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/features/images/list/images.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ImagesComponent",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "src/app/features/images/new/new.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CreateNewImageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/20",
                "status": "low"
            },
            {
                "filePath": "src/app/features/images/service/images.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ImagesService",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/features/welcome/welcome.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "WelcomeComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/header/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/input/password/password.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PasswordComponent",
                "coveragePercent": 0,
                "coverageCount": "0/19",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/input/text/text.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TextComponent",
                "coveragePercent": 0,
                "coverageCount": "0/19",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/services/error-message.service.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ErrorMessageService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.development.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.production.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/main.server.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "bootstrap",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/server.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "angularApp",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/server.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "app",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/server.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "browserDistFolder",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/server.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "reqHandler",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "src/server.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "serverDistFolder",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 83,
                "coverageCount": "5/6",
                "status": "very-good"
            },
            {
                "filePath": "src/stories/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/stories/page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/stories/user.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "User",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            }
        ]
    }
}